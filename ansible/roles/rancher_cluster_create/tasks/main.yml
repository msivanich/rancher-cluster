---

- name: get registration tokens
  uri:
    method: POST
    status_code: 201
    validate_certs: no
    url: "{{ rancher_url }}/v3-public/localProviders/local?action=login"
    headers:
      Content-Type: "application/json"
    body_format: json
    body: '{"username":"{{ username }}","password":"{{ password }}"}'
  register: logintoken
  tags:
  - nodecommand
- debug:
  #var: logintoken.json.token
- name: make cluster
  uri:
    method: POST
    status_code: 201
    validate_certs: no
    url: "{{ rancher_url }}/v3/cluster"
    headers:
      Authorization: "Bearer {{ logintoken.json.token }}"
      Content-Type: "application/json"
    body_format: json
    body: '{"dockerRootDir":"/var/lib/docker","enableNetworkPolicy":false,"type":"cluster","rancherKubernetesEngineConfig":{"addonJobTimeout":30,"ignoreDockerVersion":true,"sshAgentAuth":false,"type":"rancherKubernetesEngineConfig","authentication":{"type":"authnConfig","strategy":"x509"},"network":{"type":"networkConfig","plugin":"canal"},"ingress":{"type":"ingressConfig","provider":"nginx"},"monitoring":{"type":"monitoringConfig","provider":"metrics-server"},"services":{"type":"rkeConfigServices","kubeApi":{"podSecurityPolicy":false,"type":"kubeAPIService"},"etcd":{"snapshot":false,"type":"etcdService","extraArgs":{"heartbeat-interval":500,"election-timeout":5000}}}},"name":"{{ cluster_name }}"}'
  register: clusterresponse
- debug:
  #var: clusterresponse.json.id
- name: Create Cluster Token
  uri:
    method: POST
    status_code: 201
    validate_certs: no
    url: "{{ rancher_url }}/v3/clusterregistrationtoken"
    headers:
      Authorization: "Bearer {{ logintoken.json.token }}"
      Content-Type: "application/json"
    body_format: json
    body: '{"type":"clusterRegistrationToken","clusterId":"{{ clusterresponse.json.id }}"}'
  register: clusterregresponse
  tags:
  - nodecommand
- debug:
  #var: clusterregresponse
- name: Generate nodecommand
  uri:
    method: POST
    status_code: 201
    validate_certs: no
    url: '{{ rancher_url }}/v3/clusterregistrationtoken'
    headers:
      Authorization: "Bearer {{ logintoken.json.token }}"
      Content-Type: "application/json"
    body_format: json
    body: '{"clusterId":"{{ clusterregresponse.json.clusterId }}","name":"","namespaceId":""}'
  register: nodecmd
  tags:
  - nodecommand
- debug:
  #var: nodecmd
    msg: "{{ nodecmd.json.nodeCommand }} --etcd --controlplane --worker"
